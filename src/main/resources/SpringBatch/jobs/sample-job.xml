<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util" 
	xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">

	<import resource="../config/context.xml" />
	<import resource="../config/database.xml" />

	<bean id="report" class="com.sample.model.Employee" scope="prototype" />
	<bean id="itemProcessor" class="com.sample.CustomItemProcessor" />
	<bean id="filterReportProcessor" class="com.sample.FilterReportProcessor" />
	<bean id="customDbProcessor" class="com.sample.CustomDbProcessor" />
	<bean id="customDbProcessor2" class="com.sample.CustomDbProcessor2" />
	<bean id="dbJobListener" class = "com.sample.listener.DBJobListener" />
	

<!-- **************************************************************************************************************************************************************** -->

<!-- CVS to XML -->

	<batch:job id="cvsToXml">
		<batch:step id="step1">
			<batch:tasklet>
				<batch:chunk reader="cvsFileItemReader" writer="customWriter" processor="itemProcessor"
					commit-interval="50">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>
	
	<bean id="cvsFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="resource" value="classpath:input/report.csv" />
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="id, name, gender, designation, salary, age, dob, type" />
					</bean>
				</property>
				<property name="fieldSetMapper">
				    <bean class="com.sample.EmpDetailFieldSetMapper" />
				</property>
			</bean>
		</property>
	</bean>


	<bean id="customWriter" class="com.sample.EmpDetailCustWriter"/>

	<!--<bean id="xmlItemWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter">
		<property name="resource" value="file:outputs/report.xml" />
		<property name="marshaller" ref="reportMarshaller" />
		<property name="rootTagName" value="report" />
	</bean>
	<bean id="reportMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<property name="classesToBeBound">
			<value>com.sample.model.Employee</value>
		</property>
	</bean>-->
	
	
<!-- **************************************************************************************************************************************************************** -->

<!-- XML to CVS -->
	
	<batch:job id="xmlToCvs">
		<batch:step id="step2">
			<batch:tasklet>
				<batch:chunk reader="xmlFileReader" writer="customCvsWriter" processor="filterReportProcessor"
					commit-interval="1">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>
	
	<bean id="xmlFileReader" class="org.springframework.batch.item.xml.StaxEventItemReader">
		<property name="resource" value="classpath:input/ipXML.xml" />
		<property name="fragmentRootElementName" value="SpecEmpDetail" />
		<property name="unmarshaller" ref="reportUnmarshaller" />
  	</bean>
	 
	  <bean id="reportUnmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
	    <property name="classesToBeBound">
		    <list>
					<value>com.sample.model.SpecEmpDetail</value>
			</list>
			</property>
	  </bean>
	  
	<bean id="customCvsWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
	<property name="resource" value="file:outputs/OpReport.csv" />
	<property name="shouldDeleteIfExists" value="true" />
 
		<property name="lineAggregator">
		  <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
			<property name="delimiter" value="," />
			<property name="fieldExtractor">
			  <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
				<property name="names" value="id, name, gender, designation, salary, age, dob, type" />
			  </bean>
			</property>
		   </bean>
		</property>
  	</bean>
  	
  	
<!-- **************************************************************************************************************************************************************** -->  	

<!-- DB to DB -->  	
  	
  	<batch:job id="dbToDb">
		<batch:step id="step3">
			<batch:tasklet>
				<!--<batch:chunk reader="dbReader" writer="customDBWriter" processor = "customDbProcessor" commit-interval="1" />-->
				<batch:chunk reader="customDbReader" writer="customDBWriter2" processor = "customDbProcessor2" commit-interval="1" />
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="dbJobListener" />
		</batch:listeners>
	</batch:job>
	
    <bean id="customDbReader" class="com.sample.CustomDbReader">  
   		<property name="dataSource" ref="dataSource" /> 
   	</bean>
   
   <bean id="customDBWriter2" class="com.sample.CustomDBWriter2">
    	<property name="dataSource" ref="dataSource" />
   </bean>
   
   <!--<bean id="dbReader" class="org.springframework.batch.item.database.JdbcCursorItemReader" scope="step"> 
	    <property name="dataSource" ref="dataSource" /> 
	    <property name="sql" value="SELECT * FROM EMPLOYEE" /> 
	    <property name="rowMapper"> 
	        <bean class="com.sample.SpecEmpRowMapper" /> 
	    </property> 
    </bean>
    
    <bean id="customDBWriter" class="com.sample.CustomDBWriter">
    	<property name="dataSource" ref="dataSource" />
    </bean>-->
    
    <!--<bean id="dbWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter" scope="step">
    	<property name="dataSource" ref="dataSource" />
    	<property name="sql" value="insert into GOLD_EMPLOYEE_2 values(:id, :name, :gender, :designation, :salary, :age, :dob, :type)"/>
		<property name="itemSqlParameterSourceProvider">
			<bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
    </bean>-->
    
    <!--	JdbcPagingItemReader for Partitioning
    <bean id="dbReader" class="org.springframework.batch.item.database.JdbcPagingItemReader" scope="step"> 
	    <property name="dataSource" ref="dataSource" /> 
	    <property name="queryProvider">
	    	<bean class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
	    		<property name="dataSource" ref="dataSource" />
	    		<property name="selectClause" value="SELECT *"/>
		    	<property name="fromClause" value="FROM EMPLOYEE" />
		    	<property name="whereClause" value="where id &gt;= :fromId and id &lt;= :toId" /> 
		    	<property name="sortKey" value="id" />
			</bean>
	    </property>
	    <property name="parameterValues">
		  <map>
			<entry key="fromId" value="#{stepExecutionContext[fromId]}" />
			<entry key="toId" value="#{stepExecutionContext[toId]}" />
		  </map>
		</property>
		<property name="pageSize" value="1" />
	    <property name="rowMapper"> 
	        <bean class="com.sample.SpecEmpRowMapper" /> 
	    </property> 
    </bean>-->
    
    
<!-- **************************************************************************************************************************************************************** --> 

</beans>